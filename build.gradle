/**
 * build.gradle
 *
 * Copyright 2018 Michael G. Leatherman <michael.g.leatherman@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

 plugins {
  id 'java'
  id 'application'
}

group                   = 'net.leathermania'
version                 = "${versionTag}"
sourceCompatibility     = 1.8
targetCompatibility     = 1.8

/*
 * functions
 */
def findProperty = {String key, Object defaultVal = null -> 
    def property = System.getProperty(key) ?: project.hasProperty(key) ? project.property(key) : null

    property ?: defaultVal
}
/*
 * end functions
 */

/*
 * application
 */
mainClassName = findProperty('mainClass', 'teleporter.Main')

run {
    standardInput = System.in
    if (project.hasProperty("appArgs")) {
        args(appArgs.split(','))
    }
}
/*
 * end application
 */

/*
 * manifest file
 */
ext.buildDate = null
compileJava.doLast {
    buildDate = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    jar.manifest {
        attributes(
            'Built-Date': project.buildDate
        )
    }
}
        
tasks.jar.onlyIf { return project.buildDate != null }
jar {
    manifest {
        attributes(
            'Implementation-Group': project.group,
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,        
            'Implementation-Vendor': "Michael Leatherman",            
            'Built-By': System.getProperty('user.name'),
            'Built-JDK': System.getProperty('java.version'),
            'Built-Host': InetAddress.getLocalHost().getHostName(),                    
            'Source-Compatibility': project.sourceCompatibility,
            'Target-Compatibility': project.targetCompatibility            
        )
    }
}
/*
 * end manifest file
 */

task sourceJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
